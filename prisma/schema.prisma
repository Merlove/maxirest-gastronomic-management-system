// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  OWNER
  MANAGER
  WAITER
  KITCHEN
  DELIVERY
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  READY
  DELIVERED
  CANCELLED
}

enum TableStatus {
  FREE
  OCCUPIED
  RESERVED
  WAITING
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CASH
  CARD
  QR
  TRANSFER
  MERCADOPAGO
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String
  role          Role      @default(WAITER)
  restaurant    Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId  String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  orders        Order[]
}

model Restaurant {
  id            String    @id @default(cuid())
  name          String
  address       String
  phone         String
  email         String
  subscription  Subscription?
  users         User[]
  products      Product[]
  categories    Category[]
  tables        Table[]
  orders        Order[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Subscription {
  id            String    @id @default(cuid())
  restaurant    Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId  String    @unique
  status        Boolean   @default(true)
  startDate     DateTime  @default(now())
  endDate       DateTime
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Category {
  id            String    @id @default(cuid())
  name          String
  restaurant    Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId  String
  products      Product[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Product {
  id            String    @id @default(cuid())
  name          String
  description   String?
  price         Float
  image         String?
  stock         Int       @default(0)
  category      Category  @relation(fields: [categoryId], references: [id])
  categoryId    String
  restaurant    Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId  String
  orderItems    OrderItem[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Table {
  id            String    @id @default(cuid())
  number        Int
  capacity      Int
  status        TableStatus @default(FREE)
  restaurant    Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId  String
  orders        Order[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Order {
  id            String    @id @default(cuid())
  table         Table?    @relation(fields: [tableId], references: [id])
  tableId       String?
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  restaurant    Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId  String
  status        OrderStatus @default(PENDING)
  items         OrderItem[]
  payment       Payment?
  total         Float
  notes         String?
  isDelivery    Boolean   @default(false)
  deliveryAddress String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model OrderItem {
  id            String    @id @default(cuid())
  order         Order     @relation(fields: [orderId], references: [id])
  orderId       String
  product       Product   @relation(fields: [productId], references: [id])
  productId     String
  quantity      Int
  price         Float
  notes         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Payment {
  id            String    @id @default(cuid())
  order         Order     @relation(fields: [orderId], references: [id])
  orderId       String    @unique
  amount        Float
  method        PaymentMethod
  status        PaymentStatus @default(PENDING)
  transactionId String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}
